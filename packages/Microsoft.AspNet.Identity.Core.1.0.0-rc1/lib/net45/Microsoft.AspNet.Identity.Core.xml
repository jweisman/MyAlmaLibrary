<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.AspNet.Identity.Core</name>
  </assembly>
  <members>
    <member name="T:Microsoft.AspNet.Identity.IRole">
      <summary> Minimal set of data needed to persist role data </summary>
    </member>
    <member name="P:Microsoft.AspNet.Identity.IRole.Id">
      <summary> Id of the role </summary>
    </member>
    <member name="T:Microsoft.AspNet.Identity.IRoleStore">
      <summary> Interface for managing the creation and membership of roles </summary>
    </member>
    <member name="M:Microsoft.AspNet.Identity.IRoleStore.AddUserToRole(System.String,System.String)">
      <summary> Returns true if the user is successfully added to the role </summary>
    </member>
    <member name="M:Microsoft.AspNet.Identity.IRoleStore.CreateRole(Microsoft.AspNet.Identity.IRole)">
      <summary> Creates a role, returns true if successful </summary>
    </member>
    <member name="M:Microsoft.AspNet.Identity.IRoleStore.DeleteRole(System.String,System.Boolean)">
      <summary>  Delete a role, returns true if successful </summary>
    </member>
    <member name="M:Microsoft.AspNet.Identity.IRoleStore.GetRolesForUser(System.String)">
      <summary> Returns the roles for the user </summary>
    </member>
    <member name="M:Microsoft.AspNet.Identity.IRoleStore.IsUserInRole(System.String,System.String)">
      <summary> Returns true if the user is in the specified role </summary>
    </member>
    <member name="M:Microsoft.AspNet.Identity.IRoleStore.RemoveUserFromRole(System.String,System.String)">
      <summary> Returns true if the user was removed from the role </summary>
    </member>
    <member name="M:Microsoft.AspNet.Identity.IRoleStore.RoleExists(System.String)">
      <summary> Returns true if the role exists </summary>
    </member>
    <member name="T:Microsoft.AspNet.Identity.IUser">
      <summary> Minimal interface for a user with a string user key </summary>
    </member>
    <member name="P:Microsoft.AspNet.Identity.IUser.Id">
      <summary> Unique key for the user </summary>
    </member>
    <member name="T:Microsoft.AspNet.Identity.IUserLogin">
      <summary> Represents a linked login for a user (i.e. a local username/password or a Facebook/Google account </summary>
    </member>
    <member name="P:Microsoft.AspNet.Identity.IUserLogin.LoginProvider">
      <summary> Provider for the linked login, i.e. Local, Facebook, Google, etc. </summary>
    </member>
    <member name="P:Microsoft.AspNet.Identity.IUserLogin.ProviderKey">
      <summary> Key for the linked login at the provider </summary>
    </member>
    <member name="P:Microsoft.AspNet.Identity.IUserLogin.UserId">
      <summary> UserId for the user who owns this account </summary>
    </member>
    <member name="T:Microsoft.AspNet.Identity.IUserLoginStore">
      <summary> Maps local userIds to account providers, i.e. a local username/password, Google, Facebook, Twitter, Microsoft </summary>
    </member>
    <member name="M:Microsoft.AspNet.Identity.IUserLoginStore.Add(Microsoft.AspNet.Identity.IUserLogin)">
      <summary> Adds the given user login </summary>
    </member>
    <member name="M:Microsoft.AspNet.Identity.IUserLoginStore.GetLogins(System.String)">
      <summary> Returns the linked accounts for this user </summary>
    </member>
    <member name="M:Microsoft.AspNet.Identity.IUserLoginStore.GetProviderKey(System.String,System.String)">
      <summary> Returns the linked account key for the userId at the specified loginProvider, null if not linked </summary>
    </member>
    <member name="M:Microsoft.AspNet.Identity.IUserLoginStore.GetUserId(System.String,System.String)">
      <summary> Returns the local userid for the specified loginProvider/providerKey combination, null if not found </summary>
    </member>
    <member name="M:Microsoft.AspNet.Identity.IUserLoginStore.Remove(System.String,System.String,System.String)">
      <summary> Removes the user login with the specified combination if it exists, returns true if found and removed </summary>
    </member>
    <member name="T:Microsoft.AspNet.Identity.IUserSecret">
      <summary> Minimal set of data needed to persist login data </summary>
    </member>
    <member name="P:Microsoft.AspNet.Identity.IUserSecret.Secret">
      <summary> Opaque string to validate the user, i.e. password </summary>
    </member>
    <member name="P:Microsoft.AspNet.Identity.IUserSecret.UserName">
      <summary> Username </summary>
    </member>
    <member name="T:Microsoft.AspNet.Identity.IUserSecretStore">
      <summary> Stores login information (username/secret) </summary>
    </member>
    <member name="M:Microsoft.AspNet.Identity.IUserSecretStore.Create(Microsoft.AspNet.Identity.IUserSecret)">
      <summary> Create a login </summary>
    </member>
    <member name="M:Microsoft.AspNet.Identity.IUserSecretStore.Delete(System.String)">
      <summary> Delete a user's login </summary>
    </member>
    <member name="M:Microsoft.AspNet.Identity.IUserSecretStore.Find(System.String)">
      <summary> Return the userSecret info for the given userName, null if not found </summary>
    </member>
    <member name="M:Microsoft.AspNet.Identity.IUserSecretStore.UpdateSecret(System.String,System.String)">
      <summary> Update the secret for userName </summary>
    </member>
    <member name="M:Microsoft.AspNet.Identity.IUserSecretStore.Validate(System.String,System.String)">
      <summary> Returns true if the secret is correct for userName </summary>
    </member>
    <member name="T:Microsoft.AspNet.Identity.IUserStore">
      <summary> Responsible for creating/deleting/retrieving users by userId </summary>
    </member>
    <member name="M:Microsoft.AspNet.Identity.IUserStore.Create(Microsoft.AspNet.Identity.IUser)">
      <summary> Creates the specified user  </summary>
    </member>
    <member name="M:Microsoft.AspNet.Identity.IUserStore.Delete(System.String)">
      <summary> Deletes the specified user </summary>
    </member>
    <member name="M:Microsoft.AspNet.Identity.IUserStore.Find(System.String)">
      <summary> Finds a user by its key </summary>
    </member>
  </members>
</doc>